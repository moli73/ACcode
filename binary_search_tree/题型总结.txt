1.利用BST中序遍历升序特点recursion traversal方法
#501. 找mode number，等价为从sorted list中找mode number
recursion inorder traversal顺序上得到sorted list，
利用helper的参量数组，记录前一个节点的number，当前count个数，最大个数。
注意：最后一个节点跳出后，仍要更新参量；使用.clear()清空数组，用new ArrayList<Integer>(),原参量不变。
temp[0] -- prev number
temp[1] -- prev count
tmep[2] -- max res
if(temp[1] == 0){//for first number
    temp[0] = root.val;
    temp[1] = 1;
}
else if(root.val == temp[0]){//for same number
    temp[1]++;
}
else{//for diff number, to update parameter
    if(temp[1] == temp[2]){
        res.add(temp[0]);
    }
    else if(temp[1] > temp[2]){
        //res = new ArrayList<Integer>();//this cannot influence the origin arraylist
        res.clear();
        res.add(temp[0]);
        temp[2] = temp[1];
    }
    temp[0] = root.val;
    temp[1] = 1;
}

2.BST的分治求解
#230， 找第k小的数。
思路转化：可以通过数当前节点左子树的节点个数，来反应当前节点的排序情况。
分治法，helper函数返回BST的节点数。
主函数中，通过对左子树的个数，来找第k个数。
int count = helper(root.left);                              //helper统计左子树节点数
if(count == k - 1) return root.val;                         //左子树有k-1个节点，则当前节点是第k小数
else if(count > k - 1) return kthSmallest(root.left, k);    //左子树大于等于k个节点，则第k小数在左子树中。
else return kthSmallest(root.right, k - count - 1);         //左子树小于k-1个节点，则第k小数在右子树中，k值更新

#333，找到subtree是BST，且节点数最多，并返回节点个数
分治法，返回值需要自己构建，需要返回，range（的最小值，最大值），以及当前节点数。
BST的子节点的大小，改变range的范围，当前节点必须落在，range内。同时用节点个数，表示是否valid BST。
终止条件：空节点，节点个数为0，范围是从负无穷，到正无穷（关键：这是为了满足父亲节点能落在子树的区间内）。
递归条件：左子树BST valid，右子树BST valid，且当前值大于left.max, 小于right.min。即落在范围内。
返回值：左子树的min与当前值取较小为返回min，右子树的max与当前值取较大为返回max。（用子树和当前节点去构建当前节点树的区间范围。）

3.利用BST中序遍历iteration的实现
#98. check isValid BST
解1:iteration中序遍历中，在出栈的时候，将当前节点与pre节点进行比较，必须保持递增顺序。
解2:利用分治，return boolean变量是否valid BST，helper函数带参数，是当前树的最小最大范围。（注意用long避免越界）

#173. BST iterator
拆分BST中序遍历iteration写法的代码：
public boolean hasNext() {
    return this.node != null || !this.stack.empty();
}

public int next() {
    while(this.node != null){
        this.stack.push(this.node);
        this.node = this.node.left;
    }
    this.node = this.stack.pop();
    int res = this.node.val;
    this.node = this.node.right;
    return res;
}


4.利用BST左右子树大小关系，循环迭代求解
#270，找与target差最小的数
从root节点找起，
比较当前节点与target的差距和待选res与target的差距，对res进行更新。
如果当前数比target小，就向数变大方向走（右子树）；
如果当前树比target大，就向数变小的方向走（左子树）；
当前节点空，则跳出循环

#255，判断preorder结果是否是BST的。（难）
利用stack记录preorder的结果，low记录当前最小边界。若cur小于stack peek则仍在左子树上，否则，出栈，直到小于peek，并更新low。
（BST大小关系的一个巧妙应用，有点逆向思维。。。。）

#285, 找BST中序遍历的后继节点（难）
if(p.val < cur.val){//如果当前节点大于目标节点，则目标节点在左子树上，当前节点可能是后继节点
    pre = cur;
    cur = cur.left;
} else{//如果当前节点小于等于目标节点，则目标节点在右子树上，pre就是后继节点
    cur = cur.right;
}

5.construct系列
#108，sortedArrayToBST
排序的array就相当于是inorder traversal的结果了。
利用分治construct树的方法，当前节点，应该是inorder traversal的中间数字，（convert it to a height balanced BST）
前半list用来构建左子树，后半list用来构建右子树。

#96. unique BST，返回个数，典型DP。
#95. unique BST，返回所有的所有可能情况。backtracking模式。
带参数的分治法：返回值是所有可能的TreeNode，参数是数字起点和终点（即是中序遍历的结果。）
（循环）当前节点可以是中序遍历结果中任意一个值，然后前面的数当左子树，后面树当右子树。

#255. preorder结果是否是BST的。
思路：根据preorder去construct BST。数组第一个数，是root节点。从第一个大于root节点的数字往后是右子树部分（如果在第一个大于root节点后还有小于root节点的数，则返回false）。跟节点到这个数之前是左子树部分。
然后，分治返回，boolean值。

#449， serialize and deserialize BST
serialize，直接preorder，分治返回String用逗号，隔开各节点数字。
deserialize， 则是根据preorder，分治返回TreeNode，关键在于找到，左子树节点们和右子树节点们：
private TreeNode deserialize(int start, int end, int[] nums){
    if(start > end) return null;
    TreeNode root = new TreeNode(nums[start]);//start is root value
    int leftEnd = start;//initial left-subtree is zero node
    int rightStart = leftEnd + 1;//the rest is right-subtree
    for(int i = start + 1; i <= end; ++i){
        if(nums[start] < nums[i]) break;
        leftEnd = i;
        rightStart = leftEnd + 1;
    }
    root.left = deserialize(start + 1, leftEnd, nums);
    root.right = deserialize(rightStart, end, nums);
    return root;
}
